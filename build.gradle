plugins {
	id 'fabric-loom' version '1.3-SNAPSHOT'
	id 'maven-publish'
	id "me.shedaniel.unified-publishing" version "0.1.+"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
group = project.maven_group
version = System.env.GITHUB_ACTIONS == "true"
		? "${project.mod_version}+build.${System.env.GITHUB_RUN_NUMBER}"
		: project.mod_version

repositories {
	maven {
		name = 'Curse Maven'
		url = "https://www.cursemaven.com"
	}
	flatDir {
		dirs 'libs'
	}
	maven { url = "https://mvn.devos.one/snapshots/" }
	maven {
		name = 'Ladysnake Mods'
		url = 'https://ladysnake.jfrog.io/artifactory/mods'
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Farmers Delight
	modCompileOnly "curse.maven:farmers-delight-fabric-482834:${project.fd_id}"
	modRuntimeOnly "curse.maven:farmers-delight-fabric-482834:${project.fd_id}"

//	// DisableCustomWorldsAdvice
//	modImplementation "com.rdvdev2.disablecustomworldsadvice:DisableCustomWorldsAdvice-3.0"
//	include "com.rdvdev2.disablecustomworldsadvice:DisableCustomWorldsAdvice-3.0"

	//Tags
	//modImplementation(include("io.github.fabricators_of_create.Porting-Lib:tags:2.1.945+1.20"))
}

loom {
	//accessWidenerPath = file("src/main/resources/${project.archives_base_name}.accesswidener")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {}
}
loom {
	runs {
		//
		// This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
		//
		datagenClient {
			inherit client
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${project.modid}"

			runDir "build/datagen"
		}
	}
}

//
// Adds the generated files into the jar you distribute to players.
//
sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}
unifiedPublishing {
	project {
		displayName = "${project.minecraft_version}-${project.mod_version}" // Optional, name of the file
		changelog = '''<ul>
  <li>Fixed crash that was caused by a deprecated API.</li>
</ul> '''
		releaseType = "release" // Optional, use "release", "beta" or "alpha"
		gameVersions = ["${project.minecraft_version}"]
		gameLoaders = ["fabric"]

		mainPublication tasks.remapJar // Declares the publicated jar

		relations {
			depends { // Mark as a required dependency
				curseforge = "fabric-api" // Optional, project slug
				modrinth = "fabric-api" // Optional, project slug or id
			}
			includes {} // Mark as an included dependency
			optional {} // Mark as an optional dependency
			conflicts {} // Mark as a conflicted dependency
		}

		curseforge {
			token = System.getenv("CF_TOKEN")
			id = "469594" // Required, must be a string, ID of CurseForge project
		}

		modrinth {
			token = System.getenv("MODRINTH_TOKEN")
			id = "HaIJSYr6" // Required, must be a string, ID of Modrinth project
		}
	}
}